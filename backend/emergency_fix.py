#!/usr/bin/env python3
"""
Emergency fix for authentication app not being recognized.
This creates the necessary migration structure.
"""

import os
import sys

print("üö® Emergency Migration Fix")
print("=" * 50)

# First, let's create a proper migration for authentication that Django will recognize
migration_content = '''# Generated by emergency fix
from django.db import migrations, models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import uuid

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. Must be a valid email address.', max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('phone_verified', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('two_factor_method', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS')], default='email', max_length=10)),
                ('avatar_url', models.URLField(blank=True)),
                ('language', models.CharField(default='es-mx', max_length=5)),
                ('timezone', models.CharField(default='America/Mexico_City', max_length=50)),
                ('current_organization_id', models.UUIDField(blank=True, help_text='Current active organization ID for multi-tenant context', null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_login_device', models.CharField(blank=True, max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'indexes': [models.Index(fields=['email'], name='authentication_user_email_idx'), models.Index(fields=['phone'], name='authentication_user_phone_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
'''

# Write the migration file
migration_path = 'apps/authentication/migrations/0001_initial.py'
print(f"\nüìù Creating {migration_path}...")

try:
    os.makedirs(os.path.dirname(migration_path), exist_ok=True)
    with open(migration_path, 'w') as f:
        f.write(migration_content)
    print("‚úÖ Migration file created")
except Exception as e:
    print(f"‚ùå Failed to create migration: {e}")
    sys.exit(1)

# Now run the Django migration directly
print("\nüîß Running Django setup and migrations...")

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.production')
import django
django.setup()

from django.core.management import call_command
from django.db import connection

try:
    # First migrate just the auth app
    print("\n1Ô∏è‚É£ Migrating Django auth...")
    call_command('migrate', 'auth', verbosity=0)
    print("‚úÖ Django auth migrated")
    
    # Then migrate authentication
    print("\n2Ô∏è‚É£ Migrating authentication app...")
    call_command('migrate', 'authentication', '0001_initial', verbosity=0)
    print("‚úÖ Authentication migrated")
    
    # Create remaining migrations for authentication
    print("\n3Ô∏è‚É£ Creating remaining authentication migrations...")
    call_command('makemigrations', 'authentication', verbosity=0)
    print("‚úÖ Migrations created")
    
    # Now migrate everything
    print("\n4Ô∏è‚É£ Running all migrations...")
    call_command('migrate', verbosity=1)
    print("‚úÖ All migrations completed!")
    
except Exception as e:
    print(f"\n‚ùå Migration error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\n‚úÖ Emergency fix completed!")