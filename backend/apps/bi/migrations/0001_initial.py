# Generated by Django 4.2.23 on 2025-07-28 22:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('root', '0001_initial'),
        ('clubs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('alert_type', models.CharField(choices=[('threshold', 'Umbral'), ('anomaly', 'Anomalía'), ('trend', 'Tendencia'), ('comparison', 'Comparación'), ('schedule', 'Programada')], max_length=20)),
                ('condition', models.CharField(choices=[('greater_than', 'Mayor que'), ('less_than', 'Menor que'), ('equals', 'Igual a'), ('not_equals', 'Diferente de'), ('between', 'Entre'), ('outside', 'Fuera de rango'), ('change_percent', 'Cambio porcentual')], max_length=20)),
                ('threshold_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('threshold_value_secondary', models.DecimalField(blank=True, decimal_places=2, help_text='For range conditions (between, outside)', max_digits=15, null=True)),
                ('evaluation_period_minutes', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(1440)])),
                ('consecutive_evaluations', models.IntegerField(default=1, help_text='Number of consecutive evaluations needed to trigger', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('severity', models.CharField(choices=[('low', 'Baja'), ('medium', 'Media'), ('high', 'Alta'), ('critical', 'Crítica')], default='medium', max_length=20)),
                ('auto_resolve', models.BooleanField(default=True, help_text='Auto-resolve when condition is no longer met')),
                ('notification_config', models.JSONField(default=dict, help_text='Configuration for alert notifications')),
                ('notification_emails', models.JSONField(default=list, help_text='Additional email addresses for notifications')),
                ('status', models.CharField(choices=[('active', 'Activa'), ('triggered', 'Disparada'), ('resolved', 'Resuelta'), ('disabled', 'Deshabilitada')], default='active', max_length=20)),
                ('last_evaluation', models.DateTimeField(blank=True, null=True)),
                ('last_triggered', models.DateTimeField(blank=True, null=True)),
                ('trigger_count', models.IntegerField(default=0)),
                ('consecutive_triggers', models.IntegerField(default=0)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'ordering': ['organization', 'severity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('dashboard_type', models.CharField(choices=[('executive', 'Ejecutivo'), ('operational', 'Operacional'), ('financial', 'Financiero'), ('customer', 'Cliente'), ('staff', 'Personal'), ('custom', 'Personalizado')], max_length=20)),
                ('layout_config', models.JSONField(default=dict, help_text='Grid layout configuration for widgets')),
                ('is_public', models.BooleanField(default=False)),
                ('is_default', models.BooleanField(default=False, help_text='Default dashboard for user role')),
                ('auto_refresh', models.BooleanField(default=True)),
                ('show_filters', models.BooleanField(default=True)),
                ('show_export', models.BooleanField(default=True)),
                ('theme_config', models.JSONField(default=dict, help_text='Theme and styling configuration')),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
                ('users', models.ManyToManyField(blank=True, help_text='Users with specific access to this dashboard', related_name='dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dashboard',
                'verbose_name_plural': 'Dashboards',
                'ordering': ['organization', 'dashboard_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('source_type', models.CharField(choices=[('database', 'Base de Datos'), ('api', 'API Externa'), ('file', 'Archivo'), ('manual', 'Manual')], max_length=20)),
                ('connection_config', models.JSONField(default=dict, help_text='Configuration for data source connection')),
                ('data_mapping', models.JSONField(default=dict, help_text='Mapping of data fields to standard format')),
                ('status', models.CharField(choices=[('active', 'Activa'), ('inactive', 'Inactiva'), ('error', 'Error'), ('maintenance', 'Mantenimiento')], default='active', max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('last_error', models.TextField(blank=True)),
                ('sync_frequency_minutes', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10080)])),
                ('auto_sync', models.BooleanField(default=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'ordering': ['organization', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('metric_type', models.CharField(choices=[('revenue', 'Ingresos'), ('occupancy', 'Ocupación'), ('customers', 'Clientes'), ('retention', 'Retención'), ('growth', 'Crecimiento'), ('financial', 'Financiero'), ('operational', 'Operacional'), ('custom', 'Personalizada')], max_length=20)),
                ('calculation_type', models.CharField(choices=[('sum', 'Suma'), ('avg', 'Promedio'), ('count', 'Conteo'), ('max', 'Máximo'), ('min', 'Mínimo'), ('percentage', 'Porcentaje'), ('ratio', 'Ratio'), ('growth_rate', 'Tasa de Crecimiento'), ('custom', 'Personalizada')], max_length=20)),
                ('calculation_config', models.JSONField(default=dict, help_text='Configuration for metric calculation')),
                ('period_type', models.CharField(choices=[('real_time', 'Tiempo Real'), ('daily', 'Diaria'), ('weekly', 'Semanal'), ('monthly', 'Mensual'), ('quarterly', 'Trimestral'), ('yearly', 'Anual')], default='daily', max_length=20)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Target value for this metric', max_digits=15, null=True)),
                ('benchmark_value', models.DecimalField(blank=True, decimal_places=2, help_text='Benchmark value for comparison', max_digits=15, null=True)),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement (%, $, etc.)', max_length=20)),
                ('decimal_places', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('color', models.CharField(default='#3498db', max_length=7)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('is_public', models.BooleanField(default=False)),
                ('auto_calculate', models.BooleanField(default=True)),
                ('cache_duration_minutes', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)])),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('data_sources', models.ManyToManyField(help_text='Data sources used for this metric', related_name='metrics', to='bi.datasource')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
            ],
            options={
                'verbose_name': 'Metric',
                'verbose_name_plural': 'Metrics',
                'ordering': ['organization', 'metric_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('widget_type', models.CharField(choices=[('metric', 'Métrica'), ('chart', 'Gráfico'), ('table', 'Tabla'), ('gauge', 'Indicador'), ('map', 'Mapa'), ('text', 'Texto'), ('iframe', 'IFrame'), ('custom', 'Personalizado')], max_length=20)),
                ('chart_type', models.CharField(blank=True, choices=[('line', 'Línea'), ('bar', 'Barras'), ('pie', 'Pastel'), ('doughnut', 'Dona'), ('area', 'Área'), ('scatter', 'Dispersión'), ('radar', 'Radar'), ('bubble', 'Burbuja'), ('heatmap', 'Mapa de Calor')], help_text='Required if widget_type is chart', max_length=20)),
                ('data_config', models.JSONField(default=dict, help_text='Configuration for data display')),
                ('display_config', models.JSONField(default=dict, help_text='Configuration for widget appearance')),
                ('size', models.CharField(choices=[('small', 'Pequeño (1x1)'), ('medium', 'Mediano (2x1)'), ('large', 'Grande (2x2)'), ('wide', 'Ancho (3x1)'), ('tall', 'Alto (1x3)'), ('full', 'Completo (3x3)')], default='medium', max_length=20)),
                ('content', models.TextField(blank=True)),
                ('auto_refresh', models.BooleanField(default=True)),
                ('refresh_interval_seconds', models.IntegerField(default=300, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(3600)])),
                ('is_public', models.BooleanField(default=False)),
                ('required_permissions', models.JSONField(default=list, help_text='List of required permissions to view widget')),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('metrics', models.ManyToManyField(blank=True, help_text='Metrics displayed in this widget', related_name='widgets', to='bi.metric')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
            ],
            options={
                'verbose_name': 'Widget',
                'verbose_name_plural': 'Widgets',
                'ordering': ['organization', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('report_type', models.CharField(choices=[('financial', 'Financiero'), ('operational', 'Operacional'), ('customer', 'Clientes'), ('staff', 'Personal'), ('inventory', 'Inventario'), ('marketing', 'Marketing'), ('custom', 'Personalizado')], max_length=20)),
                ('template_config', models.JSONField(default=dict, help_text='Report template and layout configuration')),
                ('filter_config', models.JSONField(default=dict, help_text='Default filters for report data')),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('json', 'JSON'), ('html', 'HTML')], default='pdf', max_length=10)),
                ('frequency', models.CharField(choices=[('manual', 'Manual'), ('daily', 'Diario'), ('weekly', 'Semanal'), ('monthly', 'Mensual'), ('quarterly', 'Trimestral'), ('yearly', 'Anual')], default='manual', max_length=20)),
                ('scheduled_time', models.TimeField(blank=True, help_text='Time of day to generate report', null=True)),
                ('scheduled_day', models.IntegerField(blank=True, help_text='Day of month for monthly reports', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('scheduled_weekday', models.IntegerField(blank=True, help_text='Day of week for weekly reports (0=Monday)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)])),
                ('recipients', models.JSONField(default=list, help_text='List of email addresses to send report to')),
                ('is_scheduled', models.BooleanField(default=False)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
                ('next_generation', models.DateTimeField(blank=True, null=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('metrics', models.ManyToManyField(help_text='Metrics included in this report', related_name='reports', to='bi.metric')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
                ('recipient_users', models.ManyToManyField(blank=True, help_text='Users who receive this report', related_name='reports', to=settings.AUTH_USER_MODEL)),
                ('widgets', models.ManyToManyField(blank=True, help_text='Widgets included in this report', related_name='reports', to='bi.widget')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['organization', 'report_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MetricValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('value', models.DecimalField(decimal_places=5, max_digits=15)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('calculation_metadata', models.JSONField(default=dict, help_text='Metadata about how the value was calculated')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='bi.metric')),
            ],
            options={
                'verbose_name': 'Metric Value',
                'verbose_name_plural': 'Metric Values',
                'ordering': ['metric', '-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('position_x', models.IntegerField(default=0)),
                ('position_y', models.IntegerField(default=0)),
                ('width', models.IntegerField(default=1)),
                ('height', models.IntegerField(default=1)),
                ('order', models.IntegerField(default=0)),
                ('title_override', models.CharField(blank=True, max_length=200)),
                ('config_override', models.JSONField(default=dict, help_text='Override widget configuration for this dashboard')),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_widgets', to='bi.dashboard')),
                ('widget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widget_dashboards', to='bi.widget')),
            ],
            options={
                'verbose_name': 'Dashboard Widget',
                'verbose_name_plural': 'Dashboard Widgets',
                'ordering': ['dashboard', 'order'],
            },
        ),
        migrations.AddField(
            model_name='dashboard',
            name='widgets',
            field=models.ManyToManyField(related_name='dashboards', through='bi.DashboardWidget', to='bi.widget'),
        ),
        migrations.CreateModel(
            name='AlertHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('action', models.CharField(choices=[('triggered', 'Disparada'), ('resolved', 'Resuelta'), ('disabled', 'Deshabilitada'), ('modified', 'Modificada')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metric_value', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('threshold_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('message', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='bi.alert')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alert_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alert History',
                'verbose_name_plural': 'Alert History',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='alert',
            name='metric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='bi.metric'),
        ),
        migrations.AddField(
            model_name='alert',
            name='notification_users',
            field=models.ManyToManyField(blank=True, help_text='Users to notify when alert triggers', related_name='alerts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='alert',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization'),
        ),
        migrations.AddIndex(
            model_name='widget',
            index=models.Index(fields=['organization', 'club', 'widget_type'], name='bi_widget_organiz_260953_idx'),
        ),
        migrations.AddIndex(
            model_name='widget',
            index=models.Index(fields=['widget_type', 'is_active'], name='bi_widget_widget__1784f4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='widget',
            unique_together={('organization', 'club', 'name')},
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['organization', 'club', 'report_type'], name='bi_report_organiz_a44749_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['frequency', 'is_scheduled'], name='bi_report_frequen_108f97_idx'),
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['next_generation', 'is_active'], name='bi_report_next_ge_50e403_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='report',
            unique_together={('organization', 'club', 'name')},
        ),
        migrations.AddIndex(
            model_name='metricvalue',
            index=models.Index(fields=['metric', 'timestamp'], name='bi_metricva_metric__26bcd7_idx'),
        ),
        migrations.AddIndex(
            model_name='metricvalue',
            index=models.Index(fields=['metric', 'period_start', 'period_end'], name='bi_metricva_metric__b310ac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='metricvalue',
            unique_together={('metric', 'timestamp')},
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['organization', 'club', 'metric_type'], name='bi_metric_organiz_069002_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['calculation_type', 'period_type'], name='bi_metric_calcula_bec4b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='metric',
            unique_together={('organization', 'club', 'name')},
        ),
        migrations.AddIndex(
            model_name='datasource',
            index=models.Index(fields=['organization', 'club', 'status'], name='bi_datasour_organiz_0c4e04_idx'),
        ),
        migrations.AddIndex(
            model_name='datasource',
            index=models.Index(fields=['source_type', 'status'], name='bi_datasour_source__c76dc1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dashboardwidget',
            unique_together={('dashboard', 'widget')},
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['organization', 'club', 'dashboard_type'], name='bi_dashboar_organiz_256d7e_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['is_public', 'is_active'], name='bi_dashboar_is_publ_01cac7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dashboard',
            unique_together={('organization', 'club', 'name')},
        ),
        migrations.AddIndex(
            model_name='alerthistory',
            index=models.Index(fields=['alert', '-timestamp'], name='bi_alerthis_alert_i_d3d8c6_idx'),
        ),
        migrations.AddIndex(
            model_name='alerthistory',
            index=models.Index(fields=['action', '-timestamp'], name='bi_alerthis_action_ab28c9_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['organization', 'club', 'status'], name='bi_alert_organiz_7ffa2d_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['metric', 'status'], name='bi_alert_metric__94e917_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['status', 'severity'], name='bi_alert_status_ed12c0_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['last_evaluation', 'status'], name='bi_alert_last_ev_6a8c03_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='alert',
            unique_together={('organization', 'club', 'name')},
        ),
    ]
