# Generated by Django 4.2.23 on 2025-07-29 07:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clubs', '0001_initial'),
        ('root', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('clients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassLevel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(choices=[('beginner', 'Principiante'), ('intermediate', 'Intermedio'), ('advanced', 'Avanzado'), ('all_levels', 'Todos los Niveles')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0, help_text='Order for display')),
                ('color', models.CharField(default='#000000', help_text='Hex color code', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Icon class or name', max_length=50)),
            ],
            options={
                'verbose_name': 'Class Level',
                'verbose_name_plural': 'Class Levels',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ClassPackage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('num_classes', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('validity_days', models.IntegerField(help_text='Days package is valid after purchase', validators=[django.core.validators.MinValueValidator(1)])),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('transferable', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Class Package',
                'verbose_name_plural': 'Class Packages',
                'ordering': ['organization', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ClassSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, help_text='Alternative location if not on court', max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('start_time', models.TimeField()),
                ('duration_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(240)])),
                ('recurrence', models.CharField(choices=[('once', 'Una vez'), ('daily', 'Diario'), ('weekly', 'Semanal'), ('biweekly', 'Quincenal'), ('monthly', 'Mensual')], default='weekly', max_length=20)),
                ('recurrence_days', models.JSONField(default=list, help_text='Days of week for weekly recurrence (0=Monday, 6=Sunday)')),
                ('min_participants', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('max_participants', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('member_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('allow_drop_in', models.BooleanField(default=False)),
                ('drop_in_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('allow_waitlist', models.BooleanField(default=True)),
                ('waitlist_size', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('enrollment_opens_days', models.IntegerField(default=30, help_text='Days before class when enrollment opens', validators=[django.core.validators.MinValueValidator(0)])),
                ('enrollment_closes_hours', models.IntegerField(default=2, help_text='Hours before class when enrollment closes', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False)),
                ('cancelled', models.BooleanField(default=False)),
                ('cancellation_reason', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Class Schedule',
                'verbose_name_plural': 'Class Schedules',
                'ordering': ['organization', 'start_date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='ClassType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(choices=[('group', 'Grupal'), ('individual', 'Individual'), ('clinic', 'Cl√≠nica'), ('intensive', 'Intensivo'), ('workshop', 'Taller')], max_length=50)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('min_participants', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_participants', models.IntegerField(default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('default_duration_minutes', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(240)])),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('price_per_participant', models.BooleanField(default=False, help_text='If true, price is per participant')),
                ('allow_drop_in', models.BooleanField(default=False)),
                ('requires_package', models.BooleanField(default=False)),
                ('allow_waitlist', models.BooleanField(default=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
            ],
            options={
                'verbose_name': 'Class Type',
                'verbose_name_plural': 'Class Types',
                'ordering': ['organization', 'name'],
                'unique_together': {('organization', 'club', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bio', models.TextField(blank=True)),
                ('certifications', models.JSONField(default=list, help_text='List of certifications')),
                ('years_experience', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('available_days', models.JSONField(default=list, help_text='List of available days (0=Monday, 6=Sunday)')),
                ('available_from', models.TimeField(default='08:00')),
                ('available_until', models.TimeField(default='20:00')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_ratings', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('accepts_substitutions', models.BooleanField(default=True)),
                ('max_weekly_hours', models.IntegerField(default=40, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('photo_url', models.URLField(blank=True)),
                ('instagram', models.CharField(blank=True, max_length=100)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
                ('specialties', models.ManyToManyField(blank=True, related_name='specialized_instructors', to='classes.classtype')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Instructor',
                'verbose_name_plural': 'Instructors',
                'ordering': ['organization', 'user__first_name', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentPackage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('classes_remaining', models.IntegerField()),
                ('classes_used', models.IntegerField(default=0)),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('payment_reference', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_packages', to='classes.classpackage')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_packages', to='clients.clientprofile')),
            ],
            options={
                'verbose_name': 'Student Package',
                'verbose_name_plural': 'Student Packages',
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('scheduled_datetime', models.DateTimeField()),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.IntegerField()),
                ('location', models.CharField(blank=True, max_length=100)),
                ('max_participants', models.IntegerField()),
                ('enrolled_count', models.IntegerField(default=0)),
                ('attended_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('scheduled', 'Programada'), ('confirmed', 'Confirmada'), ('in_progress', 'En Progreso'), ('completed', 'Completada'), ('cancelled', 'Cancelada')], default='scheduled', max_length=20)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('court', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_sessions', to='clubs.court')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sessions', to='classes.instructor')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='classes.classschedule')),
                ('substitute_instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='substitute_sessions', to='classes.instructor')),
            ],
            options={
                'verbose_name': 'Class Session',
                'verbose_name_plural': 'Class Sessions',
                'ordering': ['scheduled_datetime'],
            },
        ),
        migrations.AddField(
            model_name='classschedule',
            name='class_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='schedules', to='classes.classtype'),
        ),
        migrations.AddField(
            model_name='classschedule',
            name='club',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club'),
        ),
        migrations.AddField(
            model_name='classschedule',
            name='court',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='class_schedules', to='clubs.court'),
        ),
        migrations.AddField(
            model_name='classschedule',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='schedules', to='classes.instructor'),
        ),
        migrations.AddField(
            model_name='classschedule',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='schedules', to='classes.classlevel'),
        ),
        migrations.AddField(
            model_name='classschedule',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization'),
        ),
        migrations.AddField(
            model_name='classpackage',
            name='class_types',
            field=models.ManyToManyField(related_name='packages', to='classes.classtype'),
        ),
        migrations.AddField(
            model_name='classpackage',
            name='club',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club'),
        ),
        migrations.AddField(
            model_name='classpackage',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization'),
        ),
        migrations.CreateModel(
            name='ClassEnrollment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('status', models.CharField(choices=[('enrolled', 'Inscrito'), ('waitlisted', 'Lista de Espera'), ('cancelled', 'Cancelado'), ('no_show', 'No Asisti√≥')], default='enrolled', max_length=20)),
                ('waitlist_position', models.IntegerField(blank=True, null=True)),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('paid', models.BooleanField(default=False)),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('checked_in', models.BooleanField(default=False)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='classes.classsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_enrollments', to='clients.clientprofile')),
            ],
            options={
                'verbose_name': 'Class Enrollment',
                'verbose_name_plural': 'Class Enrollments',
                'ordering': ['session__scheduled_datetime', 'enrolled_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassAttendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('present', models.BooleanField(default=False)),
                ('arrival_time', models.DateTimeField(blank=True, null=True)),
                ('departure_time', models.DateTimeField(blank=True, null=True)),
                ('instructor_notes', models.TextField(blank=True)),
                ('performance_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('student_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('student_feedback', models.TextField(blank=True)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='attendance', to='classes.classenrollment')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='classes.classsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_attendance', to='clients.clientprofile')),
            ],
            options={
                'verbose_name': 'Class Attendance',
                'verbose_name_plural': 'Class Attendance Records',
                'ordering': ['session__scheduled_datetime'],
            },
        ),
        migrations.CreateModel(
            name='InstructorEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('overall_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('teaching_quality', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('punctuality', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='classes.instructor')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_evaluations', to='classes.classsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructor_evaluations', to='clients.clientprofile')),
            ],
            options={
                'verbose_name': 'Instructor Evaluation',
                'verbose_name_plural': 'Instructor Evaluations',
                'ordering': ['-created_at'],
                'unique_together': {('instructor', 'student', 'session')},
            },
        ),
        migrations.AddIndex(
            model_name='classsession',
            index=models.Index(fields=['organization', 'scheduled_datetime', 'status'], name='classes_cla_organiz_498ac3_idx'),
        ),
        migrations.AddIndex(
            model_name='classsession',
            index=models.Index(fields=['instructor', 'scheduled_datetime'], name='classes_cla_instruc_5e210f_idx'),
        ),
        migrations.AddIndex(
            model_name='classsession',
            index=models.Index(fields=['court', 'scheduled_datetime'], name='classes_cla_court_i_fc1154_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classsession',
            unique_together={('schedule', 'scheduled_datetime')},
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['organization', 'start_date', 'is_active'], name='classes_cla_organiz_6de94c_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['instructor', 'start_date'], name='classes_cla_instruc_c032df_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['court', 'start_date', 'start_time'], name='classes_cla_court_i_57c160_idx'),
        ),
        migrations.AddIndex(
            model_name='classenrollment',
            index=models.Index(fields=['session', 'status'], name='classes_cla_session_43c7a4_idx'),
        ),
        migrations.AddIndex(
            model_name='classenrollment',
            index=models.Index(fields=['student', 'status'], name='classes_cla_student_42fb9e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classenrollment',
            unique_together={('session', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='classattendance',
            unique_together={('session', 'student')},
        ),
    ]
