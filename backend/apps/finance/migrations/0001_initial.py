# Generated by Django 4.2.23 on 2025-07-29 07:56

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clubs', '0001_initial'),
        ('root', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('reservations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('folio', models.CharField(blank=True, db_index=True, max_length=20)),
                ('serie', models.CharField(default='A', max_length=10)),
                ('invoice_number', models.CharField(db_index=True, max_length=50, unique=True)),
                ('invoice_type', models.CharField(choices=[('I', 'Ingreso'), ('E', 'Egreso'), ('T', 'Traslado'), ('N', 'Nómina'), ('P', 'Pago')], default='I', max_length=1)),
                ('customer_rfc', models.CharField(max_length=13)),
                ('customer_name', models.CharField(max_length=254)),
                ('customer_email', models.EmailField(max_length=254)),
                ('customer_address', models.JSONField(default=dict)),
                ('customer_tax_regime', models.CharField(blank=True, max_length=10)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('total', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('currency', models.CharField(default='MXN', max_length=3)),
                ('exchange_rate', models.DecimalField(decimal_places=6, default=1, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))])),
                ('cfdi_use', models.CharField(max_length=5)),
                ('payment_method', models.CharField(max_length=5)),
                ('payment_way', models.CharField(max_length=5)),
                ('status', models.CharField(choices=[('draft', 'Borrador'), ('pending', 'Pendiente'), ('sent', 'Enviado al SAT'), ('stamped', 'Timbrado'), ('cancelled', 'Cancelado'), ('error', 'Error')], default='draft', max_length=20)),
                ('issue_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.CharField(blank=True, max_length=36, null=True, unique=True)),
                ('stamp_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_date', models.DateTimeField(blank=True, null=True)),
                ('xml_content', models.TextField(blank=True)),
                ('pdf_url', models.URLField(blank=True)),
                ('pac_response', models.JSONField(blank=True, default=dict)),
                ('error_details', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
            ],
            options={
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=100)),
                ('payment_type', models.CharField(choices=[('cash', 'Efectivo'), ('debit_card', 'Tarjeta de Débito'), ('credit_card', 'Tarjeta de Crédito'), ('bank_transfer', 'Transferencia Bancaria'), ('online_stripe', 'Stripe (En línea)'), ('online_mercadopago', 'MercadoPago'), ('club_credit', 'Crédito del Club'), ('check', 'Cheque'), ('other', 'Otro')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('processing_fee_percentage', models.DecimalField(decimal_places=3, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fixed_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('provider_config', models.JSONField(default=dict, help_text='Provider-specific configuration (API keys, etc.)')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='clubs.club')),
            ],
            options={
                'ordering': ['club', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('reference_number', models.CharField(db_index=True, max_length=50, unique=True)),
                ('transaction_type', models.CharField(choices=[('income', 'Ingreso'), ('expense', 'Gasto'), ('refund', 'Reembolso'), ('transfer', 'Transferencia'), ('adjustment', 'Ajuste')], max_length=20)),
                ('category', models.CharField(choices=[('reservation_payment', 'Pago de Reserva'), ('membership_fee', 'Cuota de Membresía'), ('tournament_entry', 'Inscripción a Torneo'), ('class_payment', 'Pago de Clase'), ('equipment_rental', 'Renta de Equipamiento'), ('amenity_payment', 'Pago de Amenidad'), ('late_fee', 'Recargo por Retraso'), ('other_income', 'Otros Ingresos'), ('staff_salary', 'Salarios del Personal'), ('utilities', 'Servicios Públicos'), ('maintenance', 'Mantenimiento'), ('equipment_purchase', 'Compra de Equipamiento'), ('marketing', 'Marketing'), ('insurance', 'Seguros'), ('rent', 'Renta'), ('supplies', 'Suministros'), ('professional_services', 'Servicios Profesionales'), ('taxes', 'Impuestos'), ('other_expense', 'Otros Gastos')], max_length=30)),
                ('description', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('currency', models.CharField(default='MXN', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('approved', 'Aprobado'), ('completed', 'Completado'), ('cancelled', 'Cancelado'), ('failed', 'Fallido')], default='pending', max_length=20)),
                ('transaction_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('external_transaction_id', models.CharField(blank=True, max_length=200)),
                ('processor_response', models.JSONField(blank=True, default=dict)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('attachments', models.JSONField(default=list, help_text='List of attachment URLs')),
                ('tax_rate', models.DecimalField(decimal_places=3, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_transactions', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='finance.paymentmethod')),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='reservations.reservation')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('sat_product_code', models.CharField(help_text='Código de producto SAT', max_length=10)),
                ('sat_unit_code', models.CharField(default='E48', help_text='Código de unidad SAT (E48=Servicio)', max_length=10)),
                ('description', models.TextField()),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_rate', models.DecimalField(decimal_places=3, default=16, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='finance.invoice')),
            ],
            options={
                'ordering': ['invoice', 'id'],
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='transactions',
            field=models.ManyToManyField(blank=True, related_name='invoices', to='finance.transaction'),
        ),
        migrations.CreateModel(
            name='FinancialReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('income_statement', 'Estado de Resultados'), ('cash_flow', 'Flujo de Efectivo'), ('balance_sheet', 'Balance General'), ('revenue_analysis', 'Análisis de Ingresos'), ('expense_analysis', 'Análisis de Gastos'), ('monthly_summary', 'Resumen Mensual'), ('yearly_summary', 'Resumen Anual'), ('tax_report', 'Reporte Fiscal'), ('payment_methods_analysis', 'Análisis por Métodos de Pago'), ('customer_revenue', 'Ingresos por Cliente')], max_length=30)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('generation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('report_data', models.JSONField(default=dict)),
                ('file_format', models.CharField(choices=[('json', 'JSON'), ('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV')], default='json', max_length=10)),
                ('file_url', models.URLField(blank=True)),
                ('file_size', models.IntegerField(default=0, help_text='Size in bytes')),
                ('parameters', models.JSONField(default=dict, help_text='Parameters used to generate the report')),
                ('filters_applied', models.JSONField(default=dict, help_text='Filters applied during generation')),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_frequency', models.CharField(blank=True, choices=[('daily', 'Diario'), ('weekly', 'Semanal'), ('monthly', 'Mensual'), ('quarterly', 'Trimestral'), ('yearly', 'Anual')], max_length=20)),
                ('next_generation', models.DateTimeField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_reports', to='clubs.club')),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-generation_date'],
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('description', models.TextField()),
                ('expense_type', models.CharField(choices=[('fixed', 'Gasto Fijo'), ('variable', 'Gasto Variable'), ('one_time', 'Gasto Único'), ('recurring', 'Gasto Recurrente')], max_length=20)),
                ('category', models.CharField(choices=[('staff_salary', 'Salarios del Personal'), ('utilities', 'Servicios Públicos'), ('maintenance', 'Mantenimiento'), ('equipment_purchase', 'Compra de Equipamiento'), ('marketing', 'Marketing'), ('insurance', 'Seguros'), ('rent', 'Renta'), ('supplies', 'Suministros'), ('professional_services', 'Servicios Profesionales'), ('taxes', 'Impuestos'), ('other_expense', 'Otros Gastos')], max_length=30)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('currency', models.CharField(default='MXN', max_length=3)),
                ('expense_date', models.DateField(default=django.utils.timezone.now)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('approval_status', models.CharField(choices=[('pending', 'Pendiente'), ('approved', 'Aprobado'), ('rejected', 'Rechazado')], default='pending', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('vendor_name', models.CharField(blank=True, max_length=200)),
                ('vendor_rfc', models.CharField(blank=True, max_length=13)),
                ('vendor_email', models.EmailField(blank=True, max_length=254)),
                ('is_paid', models.BooleanField(default=False)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('receipt_url', models.URLField(blank=True)),
                ('attachments', models.JSONField(default=list, help_text='List of attachment URLs')),
                ('notes', models.TextField(blank=True)),
                ('tags', models.JSONField(default=list, help_text='Tags for categorization')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_expenses', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='clubs.club')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='root.organization')),
                ('transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expense', to='finance.transaction')),
            ],
            options={
                'ordering': ['-expense_date'],
            },
        ),
        migrations.CreateModel(
            name='CFDIConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('rfc', models.CharField(help_text='RFC del emisor', max_length=13)),
                ('business_name', models.CharField(help_text='Razón social', max_length=254)),
                ('tax_regime', models.CharField(help_text='Régimen fiscal (ej: 601 - General de Ley Personas Morales)', max_length=10)),
                ('address', models.JSONField(default=dict, help_text='Fiscal address as JSON')),
                ('certificate_file', models.TextField(blank=True, help_text='CER certificate content (base64)')),
                ('private_key_file', models.TextField(blank=True, help_text='KEY private key content (base64)')),
                ('private_key_password', models.CharField(blank=True, help_text='Password for private key', max_length=100)),
                ('pac_provider', models.CharField(default='finkok', help_text='PAC provider (finkok, diverza, etc.)', max_length=50)),
                ('pac_username', models.CharField(blank=True, max_length=100)),
                ('pac_password', models.CharField(blank=True, max_length=100)),
                ('pac_environment', models.CharField(choices=[('test', 'Pruebas'), ('production', 'Producción')], default='test', max_length=20)),
                ('default_cfdi_use', models.CharField(choices=[('G01', 'Adquisición de mercancías'), ('G02', 'Devoluciones, descuentos o bonificaciones'), ('G03', 'Gastos en general'), ('I01', 'Construcciones'), ('I02', 'Mobiliario y equipo de oficina por inversiones'), ('I03', 'Equipo de transporte'), ('I04', 'Equipo de computo y accesorios'), ('I05', 'Dados, troqueles, moldes, matrices y herramental'), ('I06', 'Comunicaciones telefónicas'), ('I07', 'Comunicaciones satelitales'), ('I08', 'Otra maquinaria y equipo'), ('D01', 'Honorarios médicos, dentales y gastos hospitalarios'), ('D02', 'Gastos médicos por incapacidad o discapacidad'), ('D03', 'Gastos funerales'), ('D04', 'Donativos'), ('D05', 'Intereses reales efectivamente pagados por créditos hipotecarios'), ('D06', 'Aportaciones voluntarias al SAR'), ('D07', 'Primas por seguros de gastos médicos'), ('D08', 'Gastos de transportación escolar obligatoria'), ('D09', 'Depósitos en cuentas para el ahorro, primas que tengan como base planes de pensiones'), ('D10', 'Pagos por servicios educativos'), ('P01', 'Por definir')], default='P01', max_length=5)),
                ('default_payment_method', models.CharField(default='01', help_text='Forma de pago SAT (01=Efectivo, 04=Tarjeta de crédito, etc.)', max_length=5)),
                ('default_payment_way', models.CharField(default='PUE', help_text='Método de pago SAT (PUE=Pago en una sola exhibición, PPD=Pago en parcialidades)', max_length=5)),
                ('auto_send_email', models.BooleanField(default=True, help_text='Enviar CFDI automáticamente por email')),
                ('include_pdf', models.BooleanField(default=True, help_text='Incluir PDF del CFDI')),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cfdi_configuration', to='clubs.club')),
            ],
            options={
                'verbose_name': 'CFDI Configuration',
                'verbose_name_plural': 'CFDI Configurations',
            },
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['club', 'transaction_type', 'status'], name='finance_tra_club_id_d0efcf_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_date', 'status'], name='finance_tra_transac_16631e_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['payment_method', 'status'], name='finance_tra_payment_5a29f3_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['user', 'transaction_type'], name='finance_tra_user_id_75a566_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['reservation'], name='finance_tra_reserva_30841b_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentmethod',
            index=models.Index(fields=['club', 'is_enabled'], name='finance_pay_club_id_01d665_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='paymentmethod',
            unique_together={('club', 'name')},
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['club', 'status'], name='finance_inv_club_id_5b5036_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['customer_rfc'], name='finance_inv_custome_0b5dd0_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['issue_date'], name='finance_inv_issue_d_3b7e1d_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='finance_inv_invoice_89da8a_idx'),
        ),
        migrations.AddIndex(
            model_name='financialreport',
            index=models.Index(fields=['club', 'report_type'], name='finance_fin_club_id_4e22cf_idx'),
        ),
        migrations.AddIndex(
            model_name='financialreport',
            index=models.Index(fields=['start_date', 'end_date'], name='finance_fin_start_d_21c54d_idx'),
        ),
        migrations.AddIndex(
            model_name='financialreport',
            index=models.Index(fields=['generated_by'], name='finance_fin_generat_d8c2df_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['club', 'expense_type', 'approval_status'], name='finance_exp_club_id_d4292c_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['expense_date'], name='finance_exp_expense_a60cc7_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['category', 'expense_date'], name='finance_exp_categor_095875_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['vendor_rfc'], name='finance_exp_vendor__09d6e5_idx'),
        ),
    ]
