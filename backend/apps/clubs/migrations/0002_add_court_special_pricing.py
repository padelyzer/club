# Generated by Django 4.2.23 on 2025-08-06 20:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('root', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('clubs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MaintenanceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('preventive', 'Preventivo'), ('corrective', 'Correctivo'), ('improvement', 'Mejora'), ('cleaning', 'Limpieza')], default='preventive', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('estimated_duration_hours', models.DecimalField(decimal_places=1, default=1.0, max_digits=4, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(24)])),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=0, help_text='Estimated cost in local currency', max_digits=8)),
                ('frequency_days', models.IntegerField(blank=True, help_text='Days between preventive maintenance (null for on-demand)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('required_materials', models.JSONField(default=list, help_text='List of required materials and tools')),
                ('safety_requirements', models.TextField(blank=True, help_text='Safety requirements and precautions')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_types', to='root.organization')),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(choices=[('daily', 'Diario'), ('weekly', 'Semanal'), ('monthly', 'Mensual'), ('quarterly', 'Trimestral'), ('yearly', 'Anual'), ('custom', 'Personalizado')], max_length=20)),
                ('custom_frequency_days', models.IntegerField(blank=True, help_text='Number of days for custom frequency', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('preferred_time', models.TimeField(help_text='Preferred time for maintenance')),
                ('duration_hours', models.DecimalField(decimal_places=1, default=1.0, max_digits=4, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(24)])),
                ('preferred_weekday', models.IntegerField(blank=True, choices=[(0, 'Lunes'), (1, 'Martes'), (2, 'Miércoles'), (3, 'Jueves'), (4, 'Viernes'), (5, 'Sábado'), (6, 'Domingo')], null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('auto_generate', models.BooleanField(default=True, help_text='Automatically generate maintenance records')),
                ('generate_days_ahead', models.IntegerField(default=30, help_text='How many days ahead to generate maintenance', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('last_generated_date', models.DateField(blank=True, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_schedules', to='clubs.club')),
                ('court', models.ForeignKey(blank=True, help_text='If null, applies to all courts', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_schedules', to='clubs.court')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_maintenance_schedules', to=settings.AUTH_USER_MODEL)),
                ('default_assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_maintenance_schedules', to=settings.AUTH_USER_MODEL)),
                ('maintenance_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='clubs.maintenancetype')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_schedules', to='root.organization')),
            ],
            options={
                'ordering': ['club', 'court', 'preferred_time'],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('scheduled_date', models.DateTimeField(db_index=True)),
                ('scheduled_end_date', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Baja'), ('medium', 'Media'), ('high', 'Alta'), ('urgent', 'Urgente')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Programado'), ('in_progress', 'En progreso'), ('completed', 'Completado'), ('cancelled', 'Cancelado'), ('on_hold', 'En pausa')], default='scheduled', max_length=20)),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('materials_used', models.JSONField(default=list, help_text='List of materials used with quantities and costs')),
                ('labor_hours', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True)),
                ('quality_rating', models.IntegerField(blank=True, help_text='Quality rating from 1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('before_photos', models.JSONField(default=list, help_text='URLs of before photos')),
                ('after_photos', models.JSONField(default=list, help_text='URLs of after photos')),
                ('additional_notes', models.TextField(blank=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_maintenance', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='clubs.club')),
                ('completed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_maintenance', to=settings.AUTH_USER_MODEL)),
                ('court', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='clubs.court')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_maintenance', to=settings.AUTH_USER_MODEL)),
                ('maintenance_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='clubs.maintenancetype')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='root.organization')),
            ],
            options={
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='CourtSpecialPricing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(help_text="Name for this pricing period (e.g., 'Christmas Holiday', 'Summer Peak')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of this pricing period')),
                ('period_type', models.CharField(choices=[('holiday', 'Feriado'), ('peak_season', 'Temporada Alta'), ('low_season', 'Temporada Baja'), ('special_event', 'Evento Especial'), ('promotion', 'Promoción'), ('weekend', 'Fin de Semana'), ('custom', 'Personalizado')], default='custom', max_length=20)),
                ('start_date', models.DateField(help_text='Start date for this pricing period')),
                ('end_date', models.DateField(help_text='End date for this pricing period')),
                ('start_time', models.TimeField(blank=True, help_text='Optional start time for daily application', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='Optional end time for daily application', null=True)),
                ('days_of_week', models.JSONField(default=list, help_text='List of weekdays (0=Monday, 6=Sunday). Empty means all days.')),
                ('price_per_hour', models.DecimalField(decimal_places=2, help_text='Special price per hour during this period', max_digits=8)),
                ('priority', models.IntegerField(default=1, help_text='Priority when multiple special periods overlap (1-10, higher wins)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('court', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='special_pricing_periods', to='clubs.court')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='special_pricing_periods', to='root.organization')),
            ],
            options={
                'ordering': ['court', '-priority', 'start_date'],
            },
        ),
        migrations.AddIndex(
            model_name='maintenancetype',
            index=models.Index(fields=['organization', 'category'], name='clubs_maint_organiz_0aaf21_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='maintenancetype',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='maintenanceschedule',
            index=models.Index(fields=['club', 'is_active'], name='clubs_maint_club_id_26284a_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenanceschedule',
            index=models.Index(fields=['court', 'is_active'], name='clubs_maint_court_i_9c31ab_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenanceschedule',
            index=models.Index(fields=['organization', 'auto_generate'], name='clubs_maint_organiz_aa191b_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancerecord',
            index=models.Index(fields=['court', 'scheduled_date'], name='clubs_maint_court_i_58378b_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancerecord',
            index=models.Index(fields=['club', 'status', 'scheduled_date'], name='clubs_maint_club_id_982af3_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancerecord',
            index=models.Index(fields=['organization', 'status'], name='clubs_maint_organiz_54362d_idx'),
        ),
        migrations.AddIndex(
            model_name='maintenancerecord',
            index=models.Index(fields=['assigned_to', 'status'], name='clubs_maint_assigne_17dd96_idx'),
        ),
        migrations.AddIndex(
            model_name='courtspecialpricing',
            index=models.Index(fields=['court', 'start_date', 'end_date'], name='clubs_court_court_i_155a5a_idx'),
        ),
        migrations.AddIndex(
            model_name='courtspecialpricing',
            index=models.Index(fields=['organization', 'is_active'], name='clubs_court_organiz_fa9086_idx'),
        ),
        migrations.AddIndex(
            model_name='courtspecialpricing',
            index=models.Index(fields=['start_date', 'end_date', 'is_active'], name='clubs_court_start_d_3e48c9_idx'),
        ),
    ]
