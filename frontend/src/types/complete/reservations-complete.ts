/**
 * Tipos COMPLETOS para reservations
 * Incluye TODOS los campos del modelo Django
 */

export interface Reservation {
  createdAt: string;
  created_at: string;
  updatedAt: string;
  updated_at: string;
  organization: string;
  club: string;
  court: string;
  createdBy?: string;
  created_by?: string;
  clientProfile?: string;
  client_profile?: string;
  date: string;
  startTime: string;
  start_time: string;
  endTime: string;
  end_time: string;
  durationMinutes: number;
  duration_minutes: number;
  reservationType: string;
  reservation_type: string;
  status: string;
  playerName: string;
  player_name: string;
  playerEmail: string;
  player_email: string;
  playerPhone?: string;
  player_phone?: string;
  playerCount: number;
  player_count: number;
  guestCount: number;
  guest_count: number;
  pricePerHour?: string;
  price_per_hour?: string;
  totalPrice: string;
  total_price: string;
  specialPrice?: string;
  special_price?: string;
  discountPercentage: string;
  discount_percentage: string;
  discountReason?: string;
  discount_reason?: string;
  paymentStatus: string;
  payment_status: string;
  paymentMethod?: string;
  payment_method?: string;
  paymentAmount?: string;
  payment_amount?: string;
  paidAt?: string;
  paid_at?: string;
  isSplitPayment: boolean;
  is_split_payment: boolean;
  splitCount: number;
  split_count: number;
  cancellationPolicy: string;
  cancellation_policy: string;
  cancellationDeadline?: string;
  cancellation_deadline?: string;
  cancellationFee: string;
  cancellation_fee: string;
  cancellationReason?: string;
  cancellation_reason?: string;
  cancelledAt?: string;
  cancelled_at?: string;
  cancelledBy?: string;
  cancelled_by?: string;
  requiresInvoice: boolean;
  requires_invoice: boolean;
  invoiceData?: Record<string, any>;
  invoice_data?: Record<string, any>;
  invoiceStatus: string;
  invoice_status: string;
  isRecurring: boolean;
  is_recurring: boolean;
  recurrencePattern?: string;
  recurrence_pattern?: string;
  recurrenceEndDate?: string;
  recurrence_end_date?: string;
  parentReservation?: string;
  parent_reservation?: string;
  onWaitList: boolean;
  on_wait_list: boolean;
  waitListPosition?: number;
  wait_list_position?: number;
  noShow: boolean;
  no_show: boolean;
  noShowFee: string;
  no_show_fee: string;
  bookingSource: string;
  booking_source: string;
  confirmationSent: boolean;
  confirmation_sent: boolean;
  reminderSent: boolean;
  reminder_sent: boolean;
  checkedInAt?: string;
  checked_in_at?: string;
  notes?: string;
  internalNotes?: string;
  internal_notes?: string;
  additionalServices?: Record<string, any>;
  additional_services?: Record<string, any>;
  condition: any;
  isPast?: any;
  is_past?: any;
  isToday?: any;
  is_today?: any;
  isFuture?: any;
  is_future?: any;
  durationHours?: any;
  duration_hours?: any;
  timeSlot?: any;
  time_slot?: any;
  paymentProgress?: any;
  payment_progress?: any;
}

export interface ReservationPayment {
  id: string;
  createdAt: string;
  created_at: string;
  updatedAt: string;
  updated_at: string;
  reservation: string;
  playerName: string;
  player_name: string;
  playerEmail: string;
  player_email: string;
  amount: string;
  isPaid: boolean;
  is_paid: boolean;
  paidAt?: string;
  paid_at?: string;
  paymentMethod?: string;
  payment_method?: string;
  transactionId?: string;
  transaction_id?: string;
  paymentToken: string;
  payment_token: string;
  paymentLinkSentAt?: string;
  payment_link_sent_at?: string;
  paymentLinkAccessedAt?: string;
  payment_link_accessed_at?: string;
  isCheckedIn: boolean;
  is_checked_in: boolean;
  checkedInAt?: string;
  checked_in_at?: string;
  checkInCode?: string;
  check_in_code?: string;
}

export interface BlockedSlot {
  id: string;
  createdAt: string;
  created_at: string;
  updatedAt: string;
  updated_at: string;
  organization: string;
  club: string;
  court?: string;
  startDatetime: string;
  start_datetime: string;
  endDatetime: string;
  end_datetime: string;
  reason: string;
  description?: string;
  createdBy?: string;
  created_by?: string;
  isRecurring: boolean;
  is_recurring: boolean;
  recurrencePattern?: Record<string, any>;
  recurrence_pattern?: Record<string, any>;
}
